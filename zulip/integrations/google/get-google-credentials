#!/usr/bin/env python3
import os

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

# If modifying these scopes, delete your previously saved credentials
# at zulip/bots/gcal/
# NOTE: When adding more scopes, add them after the previous one in the same field, with a space
# seperating them.
SCOPES = ["https://www.googleapis.com/auth/calendar.readonly"]
# This file contains the information that google uses to figure out which application is requesting
# this client's data.
CLIENT_SECRET_FILE = "client_secret.json"  # noqa: S105
HOME_DIR = os.path.expanduser("~")


def get_credentials() -> Credentials:
    """
    Writes google tokens to a json file, using the client secret file (for the OAuth flow),
    and the refresh token.

    If the tokens file exists and is valid, nothing needs to be done.
    If the tokens file exists, but the auth token is expired (expiry duration of auth token
    is 1 hour), the refresh token is used to get a new token.
    If the tokens file does not exist, or is invalid, the OAuth2 flow is triggered.

    The OAuth2 flow needs the client secret file, and requires the user to grant access to
    the application via a browser authorization page, for the first run.

    The fetched tokens are written to storage in a json file, for reference by other scripts.
    """

    creds = None
    credential_path = os.path.join(HOME_DIR, "google-credentials.json")

    if os.path.exists(credential_path):
        creds = Credentials.from_authorized_user_file(credential_path, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                os.path.join(HOME_DIR, CLIENT_SECRET_FILE), SCOPES
            )
            creds = flow.run_local_server(port=0)
        with open(credential_path, "w") as token:
            token.write(creds.to_json())
    return creds


get_credentials()
