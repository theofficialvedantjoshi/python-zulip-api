#!/usr/bin/env python3
import argparse
import datetime
import itertools
import logging
import os
import runpy
import sys
import time
from typing import List, Optional, Set, Tuple

import dateutil.parser
import pytz

sys.path.append(os.path.join(os.path.dirname(__file__), "../../"))
import zulip

SCOPES = ["https://www.googleapis.com/auth/calendar.events.readonly"]
# File containing user's access and refresh tokens for Google application requests.
# If it does not exist, e.g., first run, it is generated on user authorization.
TOKENS_FILE = "google-tokens.json"
HOME_DIR = os.path.expanduser("~")

# Our cached view of the calendar, updated periodically.
events: List[Tuple[int, datetime.datetime, str]] = []

# Unique keys for events we've already sent, so we don't remind twice.
sent: Set[Tuple[int, datetime.datetime]] = set()

sys.path.append(os.path.dirname(__file__))

usage = r"""google-calendar [--interval MINUTES] [--calendar CALENDAR_ID]

    This integration can be used to send Zulip messages as reminders for upcoming events from your Google Calendar.

    Specify your Zulip API credentials and server in a ~/.zuliprc file, or using the options.

    This integration should be run on your local machine, as your API key is accessible to local users through the command line.

    For more information, see https://zulip.com/integrations/doc/google-calendar.
"""

parser = zulip.add_default_arguments(argparse.ArgumentParser(usage=usage), allow_provisioning=True)
parser.add_argument(
    "--interval",
    default=30,
    type=int,
    help="Minutes before event for reminder [default: 30]",
)
parser.add_argument(
    "--calendar",
    dest="calendar_id",
    default="primary",
    help="The ID of the calendar you want to receive reminders from. By default, the primary calendar is used.",
)
options = parser.parse_args()

zulip_client = zulip.init_from_options(options)

# Import dependencies only after parsing command-line args,
# as the --provision flag can be used to install the dependencies.
try:
    from google.oauth2.credentials import Credentials
    from googleapiclient.discovery import build
except ImportError:
    logging.exception(
        "You have unsatisfied dependencies. Install all missing dependencies with %(command)s --provision",
        {"command": sys.argv[0]},
    )
    sys.exit(1)

if options.verbose:
    logging.getLogger().setLevel(logging.INFO)


def get_credentials() -> Credentials:
    """Fetches credentials using the get-google-credentials script.

    Needs to call get-google-credentials everytime, because the auth token expires every hour,
    needing to be refreshed using the refresh token.
    """
    try:
        tokens_path = os.path.join(HOME_DIR, TOKENS_FILE)
        fetch_creds = runpy.run_path("./get-google-credentials")["get_credentials"]
        return fetch_creds(tokens_path, SCOPES)
    except Exception:
        logging.exception("Error getting google credentials")
        sys.exit(1)


def populate_events() -> Optional[None]:
    credentials = get_credentials()
    service = build("calendar", "v3", credentials=credentials)

    now = datetime.datetime.now(pytz.utc).isoformat()
    feed = (
        service.events()
        .list(
            calendarId=options.calendar_id,
            timeMin=now,
            maxResults=5,
            singleEvents=True,
            orderBy="startTime",
        )
        .execute()
    )

    events.clear()
    for event in feed["items"]:
        try:
            start = dateutil.parser.parse(event["start"]["dateTime"])
            # According to the API documentation, a time zone offset is required
            # for start.dateTime unless a time zone is explicitly specified in
            # start.timeZone.
            if start.tzinfo is None:
                event_timezone = pytz.timezone(event["start"]["timeZone"])
                # pytz timezones include an extra localize method that's not part
                # of the tzinfo base class.
                start = event_timezone.localize(start)
        except KeyError:
            # All-day events can have only a date.
            start_naive = dateutil.parser.parse(event["start"]["date"])

            # All-day events don't have a time zone offset; instead, we use the
            # time zone of the calendar.
            calendar_timezone = pytz.timezone(feed["timeZone"])
            # pytz timezones include an extra localize method that's not part
            # of the tzinfo base class.
            start = calendar_timezone.localize(start_naive)

        try:
            events.append((event["id"], start, event["summary"]))
        except KeyError:
            events.append((event["id"], start, "(No Title)"))


def send_reminders() -> Optional[None]:
    messages = []
    keys = set()
    now = datetime.datetime.now(tz=pytz.utc)

    for id, start, summary in events:
        dt = start - now
        if dt.days == 0 and dt.seconds < 60 * options.interval:
            # The unique key includes the start time, because of
            # repeating events.
            key = (id, start)
            if key not in sent:
                if start.hour == 0 and start.minute == 0:
                    line = f"{summary} is today."
                else:
                    line = "{} starts at {}".format(summary, start.strftime("%H:%M"))
                logging.info("Sending reminder: %s", line)
                messages.append(line)
                keys.add(key)

    if not messages:
        return

    if len(messages) == 1:
        message = "Reminder: " + messages[0]
    else:
        message = "Reminder:\n\n" + "\n".join("* " + m for m in messages)

    result = zulip_client.send_message(
        {"type": "direct", "to": [zulip_client.get_profile()["email"]], "content": message}
    )
    if result["result"] != "success":
        logging.error("Error sending zulip message: %s: %s", result.get("code"), result.get("msg"))
    sent.update(keys)


# Loop forever
for i in itertools.count():
    try:
        # We check reminders every minute, but only
        # download the calendar every 10 minutes.
        if not i % 10:
            populate_events()
        send_reminders()
    except Exception:
        logging.exception("Couldn't download Google calendar and/or couldn't post to Zulip.")
    time.sleep(60)
